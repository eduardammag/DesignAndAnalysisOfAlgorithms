from graph_matrix import GraphMatrix

def dfs_recursive(graph: GraphMatrix, v: int, pre_order: list[int], counter: list[int]) -> None:
    """
    Fun√ß√£o recursiva da DFS.
    Marca o v√©rtice `v` como visitado e explora seus vizinhos recursivamente.
    
    Args:
        graph: objeto GraphMatrix representando o grafo
        v: v√©rtice atual sendo visitado
        pre_order: lista que armazena o instante de descoberta de cada v√©rtice
        counter: lista de tamanho 1 usada como contador (simula passagem por refer√™ncia)
    """

    # Marca o v√©rtice atual com o contador atual (momento de descoberta)
    pre_order[v] = counter[0]

    # Imprime o v√©rtice visitado, a lista pre_order atual e o contador
    print(f"Visitando vertice {v} -> pre_order = {pre_order}, contador = {counter[0]}")

    # Incrementa o contador para o pr√≥ximo v√©rtice
    counter[0] += 1

    # Percorre todos os v√©rtices do grafo para verificar vizinhos
    for u in range(graph.num_vertices):
        # Se existe uma aresta de v para u e u ainda n√£o foi visitado
        if graph.has_edge(v, u) and pre_order[u] == -1:
            # Imprime a a√ß√£o de ir de v para u
            print(f" Indo de {v} -> {u}")
            # Chamada recursiva para visitar u
            dfs_recursive(graph, u, pre_order, counter)

    # Imprime quando a fun√ß√£o retorna de um v√©rtice (fim da explora√ß√£o de todos os vizinhos)
    print(f"Retornando de {v}")


def dfs(graph: GraphMatrix, start_vertex: int = 0) -> list[int]:
    """
    Realiza a busca em profundidade (DFS) em um grafo usando matriz de adjac√™ncia.

    Args:
        graph: objeto GraphMatrix
        start_vertex: v√©rtice inicial da busca (padr√£o 0)

    Returns:
        pre_order: lista onde cada posi√ß√£o indica o instante de descoberta do v√©rtice correspondente
    """
    num_vertices = graph.num_vertices

    # Inicializa a lista de pre_order com -1 indicando que nenhum v√©rtice foi visitado
    pre_order = [-1] * num_vertices

    # Inicializa o contador como lista de tamanho 1 (para simular passagem por refer√™ncia)
    counter = [0]

    # Imprime in√≠cio da DFS a partir do v√©rtice especificado
    print(f"\n--- Iniciando DFS a partir do vertice {start_vertex} ---")

    # Chama a fun√ß√£o recursiva a partir do v√©rtice inicial
    dfs_recursive(graph, start_vertex, pre_order, counter)

    # Para cobrir componentes desconexas, verifica todos os v√©rtices
    for v in range(num_vertices):
        # Se o v√©rtice ainda n√£o foi visitado, inicia uma nova DFS
        if pre_order[v] == -1:
            print(f"\n--- Iniciando nova DFS em componente desconexa a partir do vertice {v} ---")
            dfs_recursive(graph, v, pre_order, counter)

    
    print("\nDFS finalizada. Ordem final de visita:")
    print(pre_order)
    return pre_order    # A complexidade ser√° Œò(ùëâ¬≤) .

# --------------------------------------------------------------
# COMPLEXIDADE DO DFS EM MATRIZ DE ADJAC√äNCIA
#
# 1. Inicializa√ß√£o:
#    - pre_order = [-1] * V        -> O(V) tempo e espa√ßo
#    - counter = [0]                -> O(1) tempo e espa√ßo
#
# 2. Fun√ß√£o dfs_recursive:
#    - Cada chamada marca o v√©rtice atual como visitado -> O(1)
#    - Loop 'for u in range(V)' percorre todos os v√©rtices para checar vizinhos
#      -> Cada itera√ß√£o do loop √© O(1) para has_edge, mas percorre V v√©rtices -> O(V)
#    - Cada v√©rtice √© visitado apenas uma vez
#    - Portanto, total dfs_recursive para todos os v√©rtices: O(V^2)
#
# 3. Fun√ß√£o dfs (loop principal):
#    - Garante que todas as componentes desconexas sejam visitadas
#    - Cada v√©rtice ainda √© visitado apenas uma vez
#    - N√£o altera a complexidade total ‚Üí continua O(V^2)
#
# 4. Espa√ßo usado:
#    - pre_order -> O(V)
#    - pilha de recurs√£o -> profundidade m√°xima V -> O(V)
#    - matriz de adjac√™ncia -> V x V -> O(V^2)
#    - Espa√ßo total dominante: O(V^2)
#
# 5. Resumo final:
#    - Tempo: O(V^2) (matriz de adjac√™ncia percorre todos os v√©rtices para cada v√©rtice)
#    - Espa√ßo: O(V^2) dominante pela matriz + O(V) para listas/pilha de recurs√£o
# --------------------------------------------------------------

# --------------------------------------------------------------
# COMPLEXIDADE DFS (MATRIZ DE ADJAC√äNCIA)
#
# Tempo:
#   - Cada v√©rtice √© visitado uma vez
#   - Para cada v√©rtice, percorremos todos os V v√©rtices para checar vizinhos
#   ‚Üí O(V^2)
#
# Espa√ßo:
#   - Matriz de adjac√™ncia: O(V^2)
#   - Lista pre_order + pilha de recurs√£o: O(V)
#   ‚Üí Total dominante: O(V^2)
# --------------------------------------------------------------
