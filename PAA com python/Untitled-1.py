# 2. BUSCA BIN√ÅRIA (Iterativa)
# Pressup√µe que a lista esteja ORDENADA.
def busca_binaria_iterativa(lista, alvo):
    """
    Implementa√ß√£o iterativa da busca bin√°ria.
    """
    esquerda = 0
    direita = len(lista) - 1

    while esquerda <= direita:
        meio = (esquerda + direita) // 2  # posi√ß√£o do meio

        if lista[meio] == alvo:
            return meio
        elif lista[meio] < alvo:
            esquerda = meio + 1  # descarta a metade esquerda
        else:
            direita = meio - 1  # descarta a metade direita

    return -1  # n√£o encontrou


# 3. BUSCA BIN√ÅRIA (Recursiva)
def busca_binaria_recursiva(lista, alvo, esquerda, direita):
    """
    Implementa√ß√£o recursiva da busca bin√°ria.
    """
    if esquerda > direita:
        return -1  # n√£o encontrou

    meio = (esquerda + direita) // 2

    if lista[meio] == alvo:
        return meio
    elif lista[meio] < alvo:
        return busca_binaria_recursiva(lista, alvo, meio + 1, direita)
    else:
        return busca_binaria_recursiva(lista, alvo, esquerda, meio - 1)


# ----------------------------------------------
# TESTANDO OS ALGORITMOS
# ----------------------------------------------

if __name__ == "__main__":
    lista_desordenada = [10, 23, 45, 70, 11, 15]
    lista_ordenada = sorted(lista_desordenada)  # Necess√°ria para busca bin√°ria
    alvo = 45

    print("Lista desordenada:", lista_desordenada)
    print("Lista ordenada:", lista_ordenada)
    print("Alvo:", alvo)

    # Busca sequencial
    print("\n[BUSCA SEQUENCIAL]")
    pos = busca_sequencial(lista_desordenada, alvo)
    print("Posi√ß√£o:", pos if pos != -1 else "N√£o encontrado")

    # Busca bin√°ria iterativa
    print("\n[BUSCA BIN√ÅRIA ITERATIVA]")
    pos = busca_binaria_iterativa(lista_ordenada, alvo)
    print("Posi√ß√£o:", pos if pos != -1 else "N√£o encontrado")

    # Busca bin√°ria recursiva
    print("\n[BUSCA BIN√ÅRIA RECURSIVA]")
    pos = busca_binaria_recursiva(lista_ordenada, alvo, 0, len(lista_ordenada) - 1)
    print("Posi√ß√£o:", pos if pos != -1 else "N√£o encontrado")


# üîé Diferen√ßas e Semelhan√ßas entre Iterativa e Recursiva:
#
# Semelhan√ßas:
# - Ambos aplicam o mesmo princ√≠pio da busca bin√°ria: dividir a lista ordenada ao meio e descartar metade a cada passo.
# - Ambos t√™m complexidade de tempo O(log n), muito mais eficiente que a busca sequencial (O(n)).
#
# Diferen√ßas:
# - Iterativa: usa um la√ßo while e atualiza os √≠ndices at√© encontrar ou acabar o intervalo.
#   Vantagem: ocupa menos mem√≥ria, pois n√£o cria v√°rias chamadas de fun√ß√£o.
#   Mais comum em sistemas que precisam de efici√™ncia.
#
# - Recursiva (discursiva): chama a si mesma em cada passo, reduzindo o problema a uma lista menor.
#   Vantagem: o c√≥digo fica mais pr√≥ximo da defini√ß√£o matem√°tica do algoritmo, mais intuitivo de entender.
#   Desvantagem: cada chamada ocupa espa√ßo na pilha de execu√ß√£o ‚Üí em listas muito grandes pode causar estouro de pilha.
