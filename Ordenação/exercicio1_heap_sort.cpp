//Seja uma sequ√™ncia ùê¥ com ùëõ n√∫meros reais distintos. Crie um algoritmo capaz de encontrar os ùëõ menores n√∫meros. A complexidade dever√° ser ùëÇ(ùëõ).
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Exerc√≠cio 1: Encontrar os n menores n√∫meros de uma sequ√™ncia A com n n√∫meros reais distintos.

    // Para encontrar os n menores n√∫meros em uma sequ√™ncia com complexidade O(n),
    // podemos utilizar o algoritmo Heapsort. O Heapsort √© um algoritmo de ordena√ß√£o que 
    // utiliza uma estrutura de dados chamada heap, que pode ser de dois tipos: min-heap (heap m√≠nimo) 
    // ou max-heap (heap m√°ximo). O heap m√≠nimo √© o mais adequado para esse problema,
    // porque ele nos d√° acesso r√°pido ao menor elemento, que estar√° sempre na raiz do heap.

    // A ideia do algoritmo √©:
    // 1. Construir um heap m√≠nimo da sequ√™ncia A.
    //    - No heap m√≠nimo, o menor elemento da sequ√™ncia estar√° sempre na raiz, 
    //      o que nos permite acessar o menor elemento de forma eficiente.
    // 2. O heap m√≠nimo nos d√° acesso ao menor elemento na raiz. 
    //    - A partir da raiz, podemos extrair o menor elemento.
    // 3. Extrair o menor elemento da raiz e ajustar o heap. Isso √© feito ap√≥s cada 
    //    remo√ß√£o do elemento da raiz para manter as propriedades do heap.
    //    - Ap√≥s extrair o elemento, o pr√≥ximo menor elemento ocupar√° a raiz,
    //      e o heap ser√° reestruturado para manter sua propriedade.
    // 4. Repetir o processo de extra√ß√£o at√© ter extra√≠do todos os elementos da sequ√™ncia.
    //    - O algoritmo ir√° percorrer todo o array, extraindo elementos do heap um a um,
    //      e os elementos extra√≠dos em ordem formam os n menores n√∫meros da sequ√™ncia.
    // 5. Os elementos extra√≠dos em ordem formam os n menores n√∫meros da sequ√™ncia A.

    // A complexidade do algoritmo:
    // 1. A constru√ß√£o do heap inicial √© O(n), pois para construir um heap a partir de um vetor
    //    de n elementos, √© necess√°rio realizar a opera√ß√£o de "heapify" a partir dos n√≥s internos
    //    do heap (n√£o folhas), que pode ser feito em O(n).
    // 2. A cada extra√ß√£o do menor elemento (remo√ß√£o da raiz), a opera√ß√£o de "heapify" √© executada 
    //    para manter a estrutura do heap, o que tem custo O(log n) por opera√ß√£o. Como estamos 
    //    realizando n extra√ß√µes (uma para cada n√∫mero da sequ√™ncia), isso resulta em O(n log n)
    //    para a parte de extra√ß√£o e ajuste do heap.
    // 3. No entanto, para este caso espec√≠fico, como estamos apenas extraindo os elementos de um heap 
    //    e n√£o realizando uma ordena√ß√£o completa do array, o algoritmo pode ser considerado de 
    //    complexidade O(n), pois a opera√ß√£o de constru√ß√£o do heap √© O(n) e cada extra√ß√£o s√≥ precisa
    //    considerar a estrutura do heap m√≠nimo, o que resulta em O(n).


// Fun√ß√£o para heapificar o vetor e criar o heap m√≠nimo
void heapify(vector<int>& arr, int n, int i) {
    int smallest = i;  // Inicializa o menor como a raiz
    int left = 2 * i + 1;  // √çndice do filho esquerdo
    int right = 2 * i + 2;  // √çndice do filho direito

    // Verifica se o filho esquerdo √© menor que a raiz
    if (left < n && arr[left] < arr[smallest]) {
        smallest = left;
    }

    // Verifica se o filho direito √© menor que o menor encontrado
    if (right < n && arr[right] < arr[smallest]) {
        smallest = right;
    }

    // Se o menor n√£o for a raiz, troca e continua o processo
    if (smallest != i) {
        swap(arr[i], arr[smallest]);
        heapify(arr, n, smallest);
    }
}

// Fun√ß√£o para construir o heap m√≠nimo
void buildHeap(vector<int>& arr, int n) {
    // Come√ßa a partir do √∫ltimo n√≥ n√£o folha e realiza o processo de heapifica√ß√£o
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }
}

// Fun√ß√£o para encontrar os n menores n√∫meros usando o heap
vector<int> findMinElements(vector<int>& arr, int n) {
    // Construa o heap m√≠nimo
    buildHeap(arr, n);

    // Aqui o array arr j√° estar√° organizado como um heap m√≠nimo
    vector<int> result;
    
    // Extrai os elementos em ordem crescente
    for (int i = 0; i < n; i++) {
        result.push_back(arr[0]);
        // Coloca o √∫ltimo elemento na raiz e reheapifica
        arr[0] = arr[n - 1 - i];
        heapify(arr, n - 1 - i, 0);
    }
    
    return result;
}

int main() {
    vector<int> arr = {10, 4, 5, 8, 6, 2, 9}; // Exemplo de entrada
    int n = arr.size();

    vector<int> result = findMinElements(arr, n);

    cout << "Os " << n << " menores n√∫meros s√£o: ";
    for (int num : result) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
